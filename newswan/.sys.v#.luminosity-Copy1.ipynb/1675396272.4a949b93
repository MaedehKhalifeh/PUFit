{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "31aa1a78",
   "metadata": {},
   "outputs": [],
   "source": [
    "from __future__ import annotations\n",
    "import uproot\n",
    "import warnings\n",
    "import sys\n",
    "if not sys.warnoptions:\n",
    "    warnings.simplefilter(\"ignore\")\n",
    "    \n",
    "import plotly\n",
    "import plotly.graph_objects as go\n",
    "import plotly.express as px\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "from plotly.subplots import make_subplots\n",
    "from typing import overload\n",
    "from abc import ABC, abstractmethod\n",
    "import numpy as np\n",
    "import sympy\n",
    "from sympy.integrals.transforms import laplace_transform\n",
    "import random\n",
    "import math\n",
    "from tqdm.auto import tqdm, trange\n",
    "from concurrent.futures import ThreadPoolExecutor\n",
    "import scipy.stats as stats\n",
    "from scipy.optimize import curve_fit\n",
    "\n",
    "\n",
    "from Class1 import parametricValue\n",
    "\n",
    "    \n",
    "from Class1 import fixedValue\n",
    "\n",
    "\n",
    "from Class1 import parametricValueNumpy\n",
    "\n",
    "\n",
    "from Class1 import parametricValueSympy\n",
    "\n",
    "\n",
    "#these are important for me:\n",
    "\n",
    "from Class1 import binning\n",
    "\n",
    "\n",
    "from Class1 import discretepdf\n",
    "\n",
    "\n",
    "from Class1 import NLL\n",
    "\n",
    "\n",
    "from Class1 import lumiDist\n",
    "\n",
    "\n",
    "from Class1 import lumiDistSympyLaplace\n",
    "\n",
    "\n",
    "from Class1 import lumiDistNumpy\n",
    "\n",
    "\n",
    "from Class1 import SimulationVSPu\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "b494c69b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,"
     ]
    },
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "plotlyServerURL": "https://plot.ly"
       },
       "data": [
        {
         "mode": "lines",
         "name": "puDist_testlumi",
         "type": "scatter",
         "x": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16,
          17,
          18,
          19,
          20,
          21,
          22,
          23,
          24,
          25,
          26,
          27,
          28,
          29,
          30,
          31,
          32,
          33,
          34,
          35,
          36,
          37,
          38,
          39,
          40,
          41,
          42,
          43,
          44,
          45,
          46,
          47,
          48,
          49,
          50
         ],
         "y": [
          0.11068613892423355,
          0.21304753099096713,
          0.22852368802836148,
          0.18316953645272016,
          0.12192862748425072,
          0.07031953438079103,
          0.03579248143065672,
          0.01625125181587308,
          0.006637467078520722,
          0.0024569334397496877,
          0.0008298908505530874,
          0.00025737167932212714,
          7.369186429113373e-05,
          1.957776379608761e-05,
          4.847811281370852e-06,
          1.1234062717747714e-06,
          2.4453628703817214e-07,
          5.016811761683073e-08,
          9.730261792593479e-09,
          1.7891744221705149e-09,
          3.12700335358868e-10,
          5.206849222099712e-11,
          8.27814347778472e-12,
          1.2591218310495497e-12,
          1.8355988810595326e-13,
          2.569217988250668e-14,
          3.45796610068393e-15,
          4.481996267442995e-16,
          5.602002138283494e-17,
          6.760611895408918e-18,
          7.887026238419653e-19,
          8.904421312780098e-20,
          9.738987583931697e-21,
          1.032906014442972e-21,
          1.0632731684540782e-22,
          1.0632642865628712e-23,
          1.0337229995120596e-24,
          9.77841913065874e-26,
          9.006411254859702e-27,
          8.08265919146699e-28,
          7.072315807711958e-29,
          6.037336064618984e-30,
          5.031109400240859e-31,
          4.0950867287183623e-32,
          3.257454035350224e-33,
          2.533574629139407e-34,
          1.927719428862296e-35,
          1.4355355333778705e-36,
          1.0467445495882474e-37,
          7.476746220699472e-39,
          5.233722073452768e-40
         ]
        },
        {
         "mode": "lines",
         "name": "puDist_testlumi",
         "type": "scatter",
         "x": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16,
          17,
          18,
          19,
          20,
          21,
          22,
          23,
          24,
          25,
          26,
          27,
          28,
          29,
          30,
          31,
          32,
          33,
          34,
          35,
          36,
          37,
          38,
          39,
          40,
          41,
          42,
          43,
          44,
          45,
          46,
          47,
          48,
          49,
          50
         ],
         "y": [
          0.018954176119726295,
          0.06251325757310726,
          0.10910039358901377,
          0.13745983542517648,
          0.14345922265842462,
          0.1333209409966714,
          0.11405954819710298,
          0.09076705244767899,
          0.06723980450810232,
          0.04632234777977245,
          0.029675648817442245,
          0.017699318328912302,
          0.009846978105452585,
          0.005122256503349094,
          0.0024976571870545194,
          0.0011445765821026172,
          0.0004942208102805675,
          0.00020158697590967655,
          7.786367695129299e-05,
          2.8546952590800617e-05,
          9.956538028884612e-06,
          3.3105405763832127e-06,
          1.0514666290294534e-06,
          3.196013770769459e-07,
          9.313161544715503e-08,
          2.6059762549556776e-08,
          7.01280351391911e-09,
          1.8175256613788794e-09,
          4.5427274091007246e-10,
          1.0963330405119579e-10,
          2.5577981480259556e-11,
          5.775169561421311e-12,
          1.2632396422799055e-12,
          2.679479999958437e-13,
          5.516401115818451e-14,
          1.1032551725015883e-14,
          2.1451835983949505e-15,
          4.05840843942717e-16,
          7.475953681848942e-17,
          1.3418299089905788e-17,
          2.348192426557128e-18,
          4.0090969304923454e-19,
          6.681813824083968e-20,
          1.0877354605016682e-20,
          1.7304863307395507e-21,
          2.691865512398482e-22,
          4.096314787132069e-23,
          6.1008919202471484e-24,
          8.897131504978585e-25,
          1.2710185266926708e-25,
          1.7794256776368978e-26
         ]
        },
        {
         "mode": "lines",
         "name": "puDist_testlumi",
         "type": "scatter",
         "x": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16,
          17,
          18,
          19,
          20,
          21,
          22,
          23,
          24,
          25,
          26,
          27,
          28,
          29,
          30,
          31,
          32,
          33,
          34,
          35,
          36,
          37,
          38,
          39,
          40,
          41,
          42,
          43,
          44,
          45,
          46,
          47,
          48,
          49,
          50
         ],
         "y": [
          0.008450198234726349,
          0.03354232922905265,
          0.06901271206511511,
          0.09997089390829624,
          0.11722200256928016,
          0.12093975067853135,
          0.11530821951348746,
          0.10388940008329527,
          0.08887787577098395,
          0.07200863246480872,
          0.05505275341277854,
          0.03962859648947238,
          0.026838808539342944,
          0.017107747626628495,
          0.010273789470847358,
          0.0058207982862530285,
          0.003116469876920735,
          0.0015796254360910525,
          0.0007594105578182286,
          0.00034694926532198193,
          0.0001509226357996775,
          6.262635025861885e-05,
          2.4834915033381896e-05,
          9.428153329418434e-06,
          3.4321627714213206e-06,
          1.199960870593965e-06,
          4.0352143732580003e-07,
          1.3069872058279918e-07,
          4.082725322035349e-08,
          1.2315098643811571e-08,
          3.5911810383139396e-09,
          1.013494097467145e-09,
          2.7709883301437097e-10,
          7.346778541574027e-11,
          1.89061598495368e-11,
          4.726363032301226e-12,
          1.148738075553498e-12,
          2.716558426960012e-13,
          6.255147879770224e-14,
          1.4033848864551238e-14,
          3.069883069880987e-15,
          6.55154714724733e-16,
          1.364900808197475e-16,
          2.7774073895311796e-17,
          5.523243323280261e-18,
          1.0739625895025839e-18,
          2.0428617327166933e-19,
          3.803197522850571e-20,
          6.932908880896325e-21,
          1.2380190259083544e-21,
          2.166532773953561e-22
         ]
        }
       ],
       "layout": {
        "legend": {
         "title": {
          "text": "PU number"
         }
        },
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "heatmapgl": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmapgl"
           }
          ],
          "histogram": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "title": {
         "text": "PU dist "
        },
        "xaxis": {
         "title": {
          "text": "PU"
         }
        },
        "yaxis": {
         "title": {
          "text": "probability"
         }
        }
       }
      },
      "text/html": [
       "<div>\n",
       "        \n",
       "        \n",
       "            <div id=\"7f3e560c-af3f-4427-99cc-77d04644613d\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>\n",
       "            <script type=\"text/javascript\">\n",
       "                require([\"plotly\"], function(Plotly) {\n",
       "                    window.PLOTLYENV=window.PLOTLYENV || {};\n",
       "                    \n",
       "                if (document.getElementById(\"7f3e560c-af3f-4427-99cc-77d04644613d\")) {\n",
       "                    Plotly.newPlot(\n",
       "                        '7f3e560c-af3f-4427-99cc-77d04644613d',\n",
       "                        [{\"mode\": \"lines\", \"name\": \"puDist_testlumi\", \"type\": \"scatter\", \"x\": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0], \"y\": [0.11068613892423355, 0.21304753099096713, 0.22852368802836148, 0.18316953645272016, 0.12192862748425072, 0.07031953438079103, 0.03579248143065672, 0.01625125181587308, 0.006637467078520722, 0.0024569334397496877, 0.0008298908505530874, 0.00025737167932212714, 7.369186429113373e-05, 1.957776379608761e-05, 4.847811281370852e-06, 1.1234062717747714e-06, 2.4453628703817214e-07, 5.016811761683073e-08, 9.730261792593479e-09, 1.7891744221705149e-09, 3.12700335358868e-10, 5.206849222099712e-11, 8.27814347778472e-12, 1.2591218310495497e-12, 1.8355988810595326e-13, 2.569217988250668e-14, 3.45796610068393e-15, 4.481996267442995e-16, 5.602002138283494e-17, 6.760611895408918e-18, 7.887026238419653e-19, 8.904421312780098e-20, 9.738987583931697e-21, 1.032906014442972e-21, 1.0632731684540782e-22, 1.0632642865628712e-23, 1.0337229995120596e-24, 9.77841913065874e-26, 9.006411254859702e-27, 8.08265919146699e-28, 7.072315807711958e-29, 6.037336064618984e-30, 5.031109400240859e-31, 4.0950867287183623e-32, 3.257454035350224e-33, 2.533574629139407e-34, 1.927719428862296e-35, 1.4355355333778705e-36, 1.0467445495882474e-37, 7.476746220699472e-39, 5.233722073452768e-40]}, {\"mode\": \"lines\", \"name\": \"puDist_testlumi\", \"type\": \"scatter\", \"x\": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0], \"y\": [0.018954176119726295, 0.06251325757310726, 0.10910039358901377, 0.13745983542517648, 0.14345922265842462, 0.1333209409966714, 0.11405954819710298, 0.09076705244767899, 0.06723980450810232, 0.04632234777977245, 0.029675648817442245, 0.017699318328912302, 0.009846978105452585, 0.005122256503349094, 0.0024976571870545194, 0.0011445765821026172, 0.0004942208102805675, 0.00020158697590967655, 7.786367695129299e-05, 2.8546952590800617e-05, 9.956538028884612e-06, 3.3105405763832127e-06, 1.0514666290294534e-06, 3.196013770769459e-07, 9.313161544715503e-08, 2.6059762549556776e-08, 7.01280351391911e-09, 1.8175256613788794e-09, 4.5427274091007246e-10, 1.0963330405119579e-10, 2.5577981480259556e-11, 5.775169561421311e-12, 1.2632396422799055e-12, 2.679479999958437e-13, 5.516401115818451e-14, 1.1032551725015883e-14, 2.1451835983949505e-15, 4.05840843942717e-16, 7.475953681848942e-17, 1.3418299089905788e-17, 2.348192426557128e-18, 4.0090969304923454e-19, 6.681813824083968e-20, 1.0877354605016682e-20, 1.7304863307395507e-21, 2.691865512398482e-22, 4.096314787132069e-23, 6.1008919202471484e-24, 8.897131504978585e-25, 1.2710185266926708e-25, 1.7794256776368978e-26]}, {\"mode\": \"lines\", \"name\": \"puDist_testlumi\", \"type\": \"scatter\", \"x\": [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0, 47.0, 48.0, 49.0, 50.0], \"y\": [0.008450198234726349, 0.03354232922905265, 0.06901271206511511, 0.09997089390829624, 0.11722200256928016, 0.12093975067853135, 0.11530821951348746, 0.10388940008329527, 0.08887787577098395, 0.07200863246480872, 0.05505275341277854, 0.03962859648947238, 0.026838808539342944, 0.017107747626628495, 0.010273789470847358, 0.0058207982862530285, 0.003116469876920735, 0.0015796254360910525, 0.0007594105578182286, 0.00034694926532198193, 0.0001509226357996775, 6.262635025861885e-05, 2.4834915033381896e-05, 9.428153329418434e-06, 3.4321627714213206e-06, 1.199960870593965e-06, 4.0352143732580003e-07, 1.3069872058279918e-07, 4.082725322035349e-08, 1.2315098643811571e-08, 3.5911810383139396e-09, 1.013494097467145e-09, 2.7709883301437097e-10, 7.346778541574027e-11, 1.89061598495368e-11, 4.726363032301226e-12, 1.148738075553498e-12, 2.716558426960012e-13, 6.255147879770224e-14, 1.4033848864551238e-14, 3.069883069880987e-15, 6.55154714724733e-16, 1.364900808197475e-16, 2.7774073895311796e-17, 5.523243323280261e-18, 1.0739625895025839e-18, 2.0428617327166933e-19, 3.803197522850571e-20, 6.932908880896325e-21, 1.2380190259083544e-21, 2.166532773953561e-22]}],\n",
       "                        {\"legend\": {\"title\": {\"text\": \"PU number\"}}, \"template\": {\"data\": {\"bar\": [{\"error_x\": {\"color\": \"#2a3f5f\"}, \"error_y\": {\"color\": \"#2a3f5f\"}, \"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"bar\"}], \"barpolar\": [{\"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"barpolar\"}], \"carpet\": [{\"aaxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"baxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"type\": \"carpet\"}], \"choropleth\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"choropleth\"}], \"contour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"contour\"}], \"contourcarpet\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"contourcarpet\"}], \"heatmap\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmap\"}], \"heatmapgl\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmapgl\"}], \"histogram\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"histogram\"}], \"histogram2d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2d\"}], \"histogram2dcontour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2dcontour\"}], \"mesh3d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"mesh3d\"}], \"parcoords\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"parcoords\"}], \"pie\": [{\"automargin\": true, \"type\": \"pie\"}], \"scatter\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter\"}], \"scatter3d\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter3d\"}], \"scattercarpet\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattercarpet\"}], \"scattergeo\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergeo\"}], \"scattergl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergl\"}], \"scattermapbox\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattermapbox\"}], \"scatterpolar\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolar\"}], \"scatterpolargl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolargl\"}], \"scatterternary\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterternary\"}], \"surface\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"surface\"}], \"table\": [{\"cells\": {\"fill\": {\"color\": \"#EBF0F8\"}, \"line\": {\"color\": \"white\"}}, \"header\": {\"fill\": {\"color\": \"#C8D4E3\"}, \"line\": {\"color\": \"white\"}}, \"type\": \"table\"}]}, \"layout\": {\"annotationdefaults\": {\"arrowcolor\": \"#2a3f5f\", \"arrowhead\": 0, \"arrowwidth\": 1}, \"coloraxis\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"colorscale\": {\"diverging\": [[0, \"#8e0152\"], [0.1, \"#c51b7d\"], [0.2, \"#de77ae\"], [0.3, \"#f1b6da\"], [0.4, \"#fde0ef\"], [0.5, \"#f7f7f7\"], [0.6, \"#e6f5d0\"], [0.7, \"#b8e186\"], [0.8, \"#7fbc41\"], [0.9, \"#4d9221\"], [1, \"#276419\"]], \"sequential\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"sequentialminus\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"colorway\": [\"#636efa\", \"#EF553B\", \"#00cc96\", \"#ab63fa\", \"#FFA15A\", \"#19d3f3\", \"#FF6692\", \"#B6E880\", \"#FF97FF\", \"#FECB52\"], \"font\": {\"color\": \"#2a3f5f\"}, \"geo\": {\"bgcolor\": \"white\", \"lakecolor\": \"white\", \"landcolor\": \"#E5ECF6\", \"showlakes\": true, \"showland\": true, \"subunitcolor\": \"white\"}, \"hoverlabel\": {\"align\": \"left\"}, \"hovermode\": \"closest\", \"mapbox\": {\"style\": \"light\"}, \"paper_bgcolor\": \"white\", \"plot_bgcolor\": \"#E5ECF6\", \"polar\": {\"angularaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"radialaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"scene\": {\"xaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"yaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"zaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}}, \"shapedefaults\": {\"line\": {\"color\": \"#2a3f5f\"}}, \"ternary\": {\"aaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"baxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"caxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"title\": {\"x\": 0.05}, \"xaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}, \"yaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}}}, \"title\": {\"text\": \"PU dist \"}, \"xaxis\": {\"title\": {\"text\": \"PU\"}}, \"yaxis\": {\"title\": {\"text\": \"probability\"}}},\n",
       "                        {\"responsive\": true}\n",
       "                    ).then(function(){\n",
       "                            \n",
       "var gd = document.getElementById('7f3e560c-af3f-4427-99cc-77d04644613d');\n",
       "var x = new MutationObserver(function (mutations, observer) {{\n",
       "        var display = window.getComputedStyle(gd).display;\n",
       "        if (!display || display === 'none') {{\n",
       "            console.log([gd, 'removed!']);\n",
       "            Plotly.purge(gd);\n",
       "            observer.disconnect();\n",
       "        }}\n",
       "}});\n",
       "\n",
       "// Listen for the removal of the full notebook cells\n",
       "var notebookContainer = gd.closest('#notebook-container');\n",
       "if (notebookContainer) {{\n",
       "    x.observe(notebookContainer, {childList: true});\n",
       "}}\n",
       "\n",
       "// Listen for the clearing of the current output cell\n",
       "var outputEl = gd.closest('.output');\n",
       "if (outputEl) {{\n",
       "    x.observe(outputEl, {childList: true});\n",
       "}}\n",
       "\n",
       "                        })\n",
       "                };\n",
       "                });\n",
       "            </script>\n",
       "        </div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# گرفتن انتگرال pu dist\n",
    "\n",
    "bina = binning(1 , 2 , 1.5 )\n",
    "binb = binning(2 , 3 , 2.5)\n",
    "binc = binning(3, 4 , 3.5)\n",
    "lumidist = lumiDistNumpy('testlumi' , {bina: 0.33 , binb: 0.33 , binc: 0.33 #lumi bin prob\n",
    "                                      }, 50 , np.array([1,2,2.5] # pu max and cross section for each bin \n",
    "                                                      ))\n",
    "g = lumidist.PUDist.plot(param = 1)\n",
    "lumidist.PUDist.plot(param = 2 , g=g )\n",
    "lumidist.PUDist.plot(param = 300000 , g=g )\n",
    "\n",
    "\n",
    "g.update_layout(\n",
    "        title=\"PU dist \",\n",
    "        xaxis_title= 'PU',\n",
    "        yaxis_title=\"probability\",\n",
    "        legend_title=\"PU number\",\n",
    "    )\n",
    "g"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "44409467",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(-0.5,0.5:0.0)\n",
      "(0.5,1.5:1.0)\n",
      "(1.5,2.5:2.0)\n",
      "(2.5,3.5:3.0)\n",
      "(3.5,4.5:4.0)\n",
      "(4.5,5.5:5.0)\n",
      "(5.5,6.5:6.0)\n",
      "(6.5,7.5:7.0)\n",
      "(7.5,8.5:8.0)\n",
      "(8.5,9.5:9.0)\n",
      "(9.5,10.5:10.0)\n",
      "(10.5,11.5:11.0)\n",
      "(11.5,12.5:12.0)\n",
      "(12.5,13.5:13.0)\n",
      "(13.5,14.5:14.0)\n",
      "(14.5,15.5:15.0)\n",
      "(15.5,16.5:16.0)\n",
      "(16.5,17.5:17.0)\n",
      "(17.5,18.5:18.0)\n",
      "(18.5,19.5:19.0)\n",
      "(19.5,20.5:20.0)\n",
      "(20.5,21.5:21.0)\n",
      "(21.5,22.5:22.0)\n",
      "(22.5,23.5:23.0)\n",
      "(23.5,24.5:24.0)\n",
      "(24.5,25.5:25.0)\n",
      "(25.5,26.5:26.0)\n",
      "(26.5,27.5:27.0)\n",
      "(27.5,28.5:28.0)\n",
      "(28.5,29.5:29.0)\n",
      "(29.5,30.5:30.0)\n"
     ]
    }
   ],
   "source": [
    "for a , b in lumidist.PUDist.vals:\n",
    "    print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6fd9defa",
   "metadata": {},
   "outputs": [],
   "source": [
    "counter = 0\n",
    "for b,v in lumidist.PUDist.vals:\n",
    "    counter +=1\n",
    "    print(b,v)\n",
    "print(counter)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "43397eda",
   "metadata": {},
   "outputs": [],
   "source": [
    "from Class1 import RunInfo\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "817337d8",
   "metadata": {},
   "outputs": [],
   "source": [
    "web2 = '/eos/user/c/cmstandi/www/PU/newres/test10/eraB-allruns'\n",
    "from pathlib import Path\n",
    "\n",
    "import sys\n",
    "sys.path.append('../nTuplizer')\n",
    "\n",
    "from allInfo import GetAllRuns, GetAllEras\n",
    "\n",
    "def export_graph(g , n , pname, pdir):\n",
    "    ghtml = g.to_html()\n",
    "    Path('{0}/{1}/'.format(pdir , pname) ).mkdir(parents=True, exist_ok=True)\n",
    "    with open('{0}/{1}/{2}.html'.format(pdir , pname , n) , 'w') as f:\n",
    "        f.write(ghtml)\n",
    "def publish_res(rinfo , gchi2 , vname ,  name , publish_dir):\n",
    "\n",
    "    \n",
    "    \n",
    "    \n",
    "    gg = rinfo.plot_lumi_distribution(subRuns=-1 , colorLumiScale=4 , density=False)\n",
    "    gg.update_layout(\n",
    "        title=\"Distribution of BX luminosity\",\n",
    "        xaxis_title='luminosity (1/mb 1/25ns)',\n",
    "        yaxis_title=\"probability\",\n",
    "        legend_title=\"Runs\",\n",
    "    )\n",
    "    export_graph(gg , '01-lumi_distribution' , name , publish_dir)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "    #02-pu_distribution\n",
    "    \n",
    "    gg = rinfo.plotPUDists(70)\n",
    "    export_graph(gg , '02-pu_distribution' , name , publish_dir)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "    #03-{vname}_distribution:\n",
    "    \n",
    "    if rinfo.parentRun is None:\n",
    "        gg = rinfo.plotDataDist(zoom=True)\n",
    "        export_graph(gg , '03-{0}_distribution'.format(vname) , name , publish_dir) \n",
    "\n",
    "    \n",
    "    \n",
    "    \n",
    "    #04-{vname}_predictions:\n",
    "\n",
    "    gg = rinfo.plotPredictions([60,65,75,80,90])\n",
    "    export_graph(gg , '04-{0}_predictions'.format(vname) , name , publish_dir)\n",
    "    \n",
    "        \n",
    "        \n",
    "        \n",
    "        \n",
    "    for _xsec in [60,65,75,80,90]:\n",
    "        gg = rinfo.plotRunPredictions(_xsec)\n",
    "        export_graph(gg , '05-{0}_predictions_xsec{1}'.format(vname , _xsec) , name , publish_dir)\n",
    "            \n",
    "    \n",
    "    \n",
    "    export_graph(gchi2 , '06-bestfit_details'  , name , publish_dir)\n",
    "    export_graph(rinfo.postFitPlots(), '07-postFit_plots'  , name , publish_dir)\n",
    "    export_graph(rinfo.pullPlots(50 , 1.3) , '08-pullPlots' , name , publish_dir)\n",
    "    export_graph(rinfo.NadjiehPullPlots(50 , 1.3) , '08-NadjiehPullPlots' , name , publish_dir)\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "    if rinfo.parentRun is None:\n",
    "        export_graph(rinfo.aggregateFitRes() , '09-summary1' , name ,publish_dir)\n",
    "        export_graph(rinfo.aggregateFitRes2() , '09-summary2' , name ,publish_dir)\n",
    "        export_graph(rinfo.aggregateFitRes3() , '09-summary3' , name ,publish_dir)\n",
    "        export_graph(rinfo.aggregateFitRes4() , '09-summary4' , name ,publish_dir)\n",
    "        \n",
    "        \n",
    "   \n",
    "rinfo = None\n",
    "        \n",
    "def process_and_publish(year , era , vname , vmin , vmax , vnbins , pu_max ,\n",
    "                        lumiName = 'PHYSICSDel' , \n",
    "#                         lumiQ =  np.array([0,0.2,0.6,1.0]) ,\n",
    "                        lumiQ =  np.array([0,1.0]) ,\n",
    "                        lnbins_per_q = 100 ,\n",
    "                        xsec = np.arange(30,100,1), nthreads = 30 , publish_dir = \n",
    "                        web2 ):\n",
    "    nbins = lumiQ.size -1\n",
    "  #  print(nbins)    \n",
    "\n",
    "    name = '{0}{1}/{2}'.format(era, year , vname)\n",
    "    \n",
    "    \n",
    "    #00simulation plot:\n",
    "    \n",
    "    var_bins = np.linspace(vmin,vmax,vnbins+1)\n",
    "    simDist = SimulationVSPu(vname , year = year , var_bins=var_bins , pu_max=pu_max , nthreads=nthreads)\n",
    "\n",
    "\n",
    "    g = simDist.plot(param=1 , label = 'PU = 1')\n",
    "    for i in range(10,90+1,10):\n",
    "        theName = 'PU = {0}'.format(i)\n",
    "        simDist.plot(param=i , g=g , \n",
    "                     scatterOpts={ 'name':theName}\n",
    "                    )\n",
    "\n",
    "    g.update_layout(\n",
    "        title=\"Simulated distribution for PU \",\n",
    "        xaxis_title= vname,\n",
    "        yaxis_title=\"probability\",\n",
    "        legend_title=\"PU number\",\n",
    "    )    \n",
    "    export_graph(g , '00-Simulation' , name , publish_dir )\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "    #Runs:\n",
    "    \n",
    "    allRuns = sorted( list(set( GetAllRuns(year , era) ) ) )\n",
    "#     allRuns = allRuns[22:23]\n",
    "#     print(allRuns)\n",
    "    \n",
    "    \n",
    "    \n",
    "    print('is going to run over {0} runs'.format( len(allRuns)) )\n",
    "    print('Number of Lumi Bins = {0}'.format(nbins))\n",
    "\n",
    "    \n",
    "    rinfo = RunInfo(0 , vname , var_bins , lumiName ,lumiQ , nbins_perq=lnbins_per_q , sub_runs=allRuns , \n",
    "                    nthreads=nthreads , xsecs = xsec )\n",
    "    \n",
    "    rinfo.setSimulation(simDist)\n",
    "    gchi2 = rinfo.fit()\n",
    "    \n",
    "#     print(vname)\n",
    "#     print(var_bins)\n",
    "#     print(lumiName)\n",
    "#     print(lumiQ)\n",
    "#     print(lnbins_per_q)\n",
    "    \n",
    "    try:\n",
    "        publish_res(rinfo , gchi2 , vname , name , publish_dir)\n",
    "        for sr in rinfo._subRuns : #+ rinfo._subRunsSameLumiBins:\n",
    "            #ext = '/SRSimilarBinning' if sr._isSecondHand else '/SRSameBinning'\n",
    "            publish_res(sr , None , vname , vname , '{0}/{1}{2}/Runs/Run{3}'.format(publish_dir , era, year , sr.run) )\n",
    "    except Exception as e:\n",
    "        print(e)\n",
    "        return rinfo\n",
    "    #del rinfo\n",
    "    #del simDist\n",
    "    return rinfo\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c6d65bd9",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "variables = { \n",
    "              \"nVertices\" : ( \"nVertices\" , 90 , 0 , 90 ) ,\n",
    "              \"nGoodVertices\" : (\"nGoodVertices\", 80, 0 , 80) ,\n",
    "              \"nEles\" : (\"nEles\" , 10 , 0 , 10 ) ,\n",
    "              \"nMus\" : (\"nMus\" , 10 , 0 , 10 ),\n",
    "              \"nChargedHadrons\" : (\"nChargedHadrons\" , 120 , 0 , 1200 ),\n",
    "              \"nLostTracks\": (\"nLostTracks\" , 35 , 0 , 35 ),\n",
    "              \"nPhotons\" : (\"nPhotons\" , 120 , 0 , 600 ),\n",
    "              \"nNeutralHadrons\" : (\"nNeutralHadrons\" , 60 , 0 , 120 ),\n",
    "              \"fixedGridRhoAll\" : (\"fixedGridRhoAll\" , 40 , 0 , 40 ),\n",
    "              \"fixedGridRhoFastjetAll\" : (\"fixedGridRhoFastjetAll\" , 40 , 0 , 40 ),\n",
    "              \"fixedGridRhoFastjetAllCalo\" : (\"fixedGridRhoFastjetAllCalo\" , 25 , 0 , 25 ),\n",
    "              \"fixedGridRhoFastjetCentral\" : (\"fixedGridRhoFastjetCentral\" , 50 , 0 , 50 ),\n",
    "              \"fixedGridRhoFastjetCentralCalo\" : (\"fixedGridRhoFastjetCentralCalo\" , 20 , 0 , 20 ),\n",
    "              \"fixedGridRhoFastjetCentralChargedPileUp\" : (\"fixedGridRhoFastjetCentralChargedPileUp\" , 35 , 0 , 35 ),\n",
    "              \"fixedGridRhoFastjetCentralNeutral\" : (\"fixedGridRhoFastjetCentralNeutral\" , 12 , 0 , 12 )\n",
    "            }\n",
    "\n",
    "vvv = {}\n",
    "for v,vinfo in variables.items():\n",
    "     vvv[v] = process_and_publish(2018 , 'B' , vinfo[0] , vinfo[2] , vinfo[3] , vinfo[1] , 90  )\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "08b6ae86",
   "metadata": {},
   "outputs": [],
   "source": [
    "for key in vvv:\n",
    "    for i in range(vvv[key].nLumiBins):\n",
    "        print('best fit for var = {0} in lumi bin = {1} is : {2} '.format(vvv[key].vname , i+1 , vvv[key].fitResults[i].bestFit))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "25ecc8d9",
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range len(vvv['nPhotons']._subRuns):\n",
    "    x = vvv['nPhotons'].run\n",
    "    print(x)\n",
    "# vvv['nPhotons']._run"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "691dd84f",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = vvv['nPhotons'].subRunNumbers\n",
    "print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "16385743",
   "metadata": {},
   "outputs": [],
   "source": [
    "plt = vvv['nPhotons'].lumi_distribution.plot\n",
    "plt()\n",
    "# len(vvv['nPhotons']._subRuns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "78fe451a",
   "metadata": {},
   "outputs": [],
   "source": [
    "for key in vvv:\n",
    "    for i in range(vvv[key].nLumiBins):\n",
    "        if i == 3 - 1:\n",
    "            print('best fit for var = {0} in lumi bin = {1} is : {2} '.format(vvv[key].vname , i+1 , vvv[key].fitResults[i].bestFit))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c92a5913",
   "metadata": {},
   "outputs": [],
   "source": [
    "#total plots export\n",
    "\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import plotly.express as px\n",
    "\n",
    "\n",
    "XsecBestTot = {}\n",
    "keys = []\n",
    "values = []\n",
    "nVar = len(variables.keys())\n",
    "print(nVar)\n",
    "for key in vvv:\n",
    "    for i in range(vvv[key].nLumiBins):\n",
    "#         print(i)\n",
    "        if i == 20 - 1:\n",
    "            print(i)\n",
    "print(vvv[key].nLumiBins)\n",
    "for i in range(vvv[key].nLumiBins):\n",
    "    for key in vvv:\n",
    "#         keys.append('{0} for lumi bin = {1} '.format(vvv[key].vname , i+1))\n",
    "        keys.append(vvv[key].vname)\n",
    "        values.append(vvv[key].fitResults[i].bestFit)\n",
    "#     print('values for bin = {0} is: {1}'.format(i+1 , values))\n",
    "#     print('------------------------------------')\n",
    "#     print('variables for bin = {0} is: {1}'.format(i+1 , keys))\n",
    "#     print('------------------------------------')\n",
    "    XsecBest= {}\n",
    "    for q in range(len(keys)):\n",
    "        XsecBest[keys[q]] = values[q]\n",
    "    \n",
    "#     print('Dict for bin = {0} is: {1}'.format(i+1 , XsecBest))\n",
    "#     print('------------------------------------')\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "    names = list(XsecBest.keys())\n",
    "    values = list(XsecBest.values())\n",
    "\n",
    "\n",
    "    #         print('best fit for var = {0} in lumi bin = {1} is : {2} '.format(vvv[key].vname , i+1 , vvv[key].fitResults[i].bestFit))\n",
    "\n",
    "    plt.plot(names , values ,'o-' , label='lumi bin = {0}'.format(i+1))\n",
    "    plt.xticks(rotation=90)\n",
    "\n",
    "    plt.xlabel(\"Variable\")\n",
    "    plt.ylabel(\"Xsection\")\n",
    "    plt.title(\"Best Xsection for different variables for different lumi bins for MCTune = 5\")\n",
    "\n",
    "    y_est = 69.2 #cross section\n",
    "    y_err = 69.2*.046 #cross section error\n",
    "\n",
    "    plt.plot(y_est, '-')\n",
    "    plt.fill_between(names, y_est - y_err, y_est + y_err, alpha=0.2 , label = u'69.2 \\u00B1 4.6%' )\n",
    "\n",
    "    plt.legend(loc='center left', bbox_to_anchor=(1.2, 0.5))\n",
    "#     plt.show()\n",
    "    plt.savefig('{0}/totallumi.png'.format(web2) , dpi=300, bbox_inches='tight')   # save the figure to file\n",
    "#     plt.close(fig)\n",
    "    \n",
    "#     fig.write_html('/plot for lumi =1')\n",
    "\n",
    "#     plt.savefig('XSection Best fit for lumi = {0}.png'.format(i+1))\n",
    "    keys = []\n",
    "    values = []\n",
    "# print(keys)\n",
    "# print(values)\n",
    "#     print(values)\n",
    "for i in range(len(keys)):\n",
    "    XsecBestTot[keys[i]] = values[i]\n",
    "\n",
    "# print(XsecBestTot)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e9012bd6",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "71b40edc",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a0f82962",
   "metadata": {},
   "outputs": [],
   "source": [
    "#plot for each lumi bin\n",
    "\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import plotly.express as px\n",
    "\n",
    "\n",
    "XsecBestTot = {}\n",
    "keys = []\n",
    "values = []\n",
    "nVar = len(variables.keys())\n",
    "print(nVar)\n",
    "\n",
    "for i in range(vvv[key].nLumiBins):\n",
    "    for key in vvv:\n",
    "#         keys.append('{0} for lumi bin = {1} '.format(vvv[key].vname , i+1))\n",
    "        keys.append(vvv[key].vname)\n",
    "        values.append(vvv[key].fitResults[i].bestFit)\n",
    "#     print('values for bin = {0} is: {1}'.format(i+1 , values))\n",
    "#     print('------------------------------------')\n",
    "#     print('variables for bin = {0} is: {1}'.format(i+1 , keys))\n",
    "#     print('------------------------------------')\n",
    "    XsecBest= {}\n",
    "    for q in range(len(keys)):\n",
    "        XsecBest[keys[q]] = values[q]\n",
    "    \n",
    "#     print('Dict for bin = {0} is: {1}'.format(i+1 , XsecBest))\n",
    "#     print('------------------------------------')\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "    names = list(XsecBest.keys())\n",
    "    values = list(XsecBest.values())\n",
    "\n",
    "\n",
    "    #         print('best fit for var = {0} in lumi bin = {1} is : {2} '.format(vvv[key].vname , i+1 , vvv[key].fitResults[i].bestFit))\n",
    "\n",
    "    plt.plot(names , values ,'o-' , color='tab:brown' , label='lumi bin = {0}'.format(i+1))\n",
    "    plt.xticks(rotation=90)\n",
    "\n",
    "    plt.xlabel(\"Variable\")\n",
    "    plt.ylabel(\"Xsection\")\n",
    "    plt.title(\"Best Xsection for different variables for lumi bin = {0} (MCTune = 5)\".format(i+1))\n",
    "\n",
    "    y_est = 69.2 #cross section\n",
    "    y_err = 69.2*.046 #cross section error\n",
    "\n",
    "    plt.plot(y_est, '-')\n",
    "    plt.fill_between(names, y_est - y_err, y_est + y_err, alpha=0.2 , label = u'69.2 \\u00B1 4.6%' )\n",
    "\n",
    "    plt.legend()\n",
    "    plt.savefig('{0}/plot for lumi = {1}.png'.format(web2,i+1) , dpi=300, bbox_inches='tight')\n",
    "    plt.show()\n",
    "\n",
    "    \n",
    "#     fig.write_html('/plot for lumi =1')\n",
    "\n",
    "#     plt.savefig('XSection Best fit for lumi = {0}.png'.format(i+1))\n",
    "    keys = []\n",
    "    values = []\n",
    "# print(keys)\n",
    "# print(values)\n",
    "#     print(values)\n",
    "for i in range(len(keys)):\n",
    "    XsecBestTot[keys[i]] = values[i]\n",
    "\n",
    "# print(XsecBestTot)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "844234bb",
   "metadata": {},
   "outputs": [],
   "source": [
    "#plot for each lumi bin\n",
    "\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import plotly.express as px\n",
    "\n",
    "\n",
    "XsecBestTot = {}\n",
    "keys = []\n",
    "values = []\n",
    "nVar = len(variables.keys())\n",
    "print(nVar)\n",
    "\n",
    "for i in range(vvv[key].nLumiBins):\n",
    "    for key in vvv:\n",
    "#         keys.append('{0} for lumi bin = {1} '.format(vvv[key].vname , i+1))\n",
    "        keys.append(vvv[key].vname)\n",
    "        values.append(vvv[key].fitResults[i].bestFit)\n",
    "#     print('values for bin = {0} is: {1}'.format(i+1 , values))\n",
    "#     print('------------------------------------')\n",
    "#     print('variables for bin = {0} is: {1}'.format(i+1 , keys))\n",
    "#     print('------------------------------------')\n",
    "    XsecBest= {}\n",
    "    for q in range(len(keys)):\n",
    "        XsecBest[keys[q]] = values[q]\n",
    "    \n",
    "#     print('Dict for bin = {0} is: {1}'.format(i+1 , XsecBest))\n",
    "#     print('------------------------------------')\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "    names = list(XsecBest.keys())\n",
    "    values = list(XsecBest.values())\n",
    "\n",
    "\n",
    "    #         print('best fit for var = {0} in lumi bin = {1} is : {2} '.format(vvv[key].vname , i+1 , vvv[key].fitResults[i].bestFit))\n",
    "\n",
    "    plt.plot(names , values ,'o-' , color='tab:brown' , label='lumi bin = {0}'.format(i+1))\n",
    "    plt.xticks(rotation=90)\n",
    "\n",
    "    plt.xlabel(\"Variable\")\n",
    "    plt.ylabel(\"Xsection\")\n",
    "    plt.title(\"Best Xsection for different variables for lumi bin = {0} (MCTune = 5)\".format(i+1))\n",
    "\n",
    "\n",
    "\n",
    "    plt.legend()\n",
    "#     plt.savefig('/eos/user/c/cmstandi/www/PU/newres/data2/5/plot for lumi = {}.png'.format(i+1) , dpi=300, bbox_inches='tight')\n",
    "    plt.show()\n",
    "\n",
    "    \n",
    "#     fig.write_html('/plot for lumi =1')\n",
    "\n",
    "#     plt.savefig('XSection Best fit for lumi = {0}.png'.format(i+1))\n",
    "    keys = []\n",
    "    values = []\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "42cbe91d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "plt.style.use('seaborn-white')\n",
    "import numpy as np\n",
    "keys= []\n",
    "for i in range(vvv[key].nLumiBins):\n",
    "    for key in vvv:\n",
    "#         keys.append('{0} for lumi bin = {1} '.format(vvv[key].vname , i+1))\n",
    "        keys.append(vvv[key].vname)\n",
    "names = keys \n",
    "def f(x ,y):\n",
    "    return np.sin(y) ** 10 + np.cos(y)\n",
    "x = np.array(names)\n",
    "y = np.array([1, 2,3,4,5,6])\n",
    "\n",
    "X, Y = np.meshgrid(x, y)\n",
    "Z = f(X, Y)\n",
    "plt.contourf(x, y, Z, 20, cmap='RdGy')\n",
    "plt.xticks(rotation=90)\n",
    "\n",
    "plt.colorbar()\n",
    "# print(vvv['fixedGridRhoAll'].fitResults[0].bestFit)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9ee272fb",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "plt.style.use('seaborn-white')\n",
    "import numpy as np\n",
    "keys= []\n",
    "values = []\n",
    "for i in range(vvv[key].nLumiBins):\n",
    "    for key in vvv:\n",
    "#         keys.append('{0} for lumi bin = {1} '.format(vvv[key].vname , i+1))\n",
    "        keys.append(vvv[key].vname)\n",
    "        values.append(vvv[key].fitResults[i].bestFit)\n",
    "names = keys \n",
    "# print(names)\n",
    "print(len(names))\n",
    "# print(values)\n",
    "print(len(values))\n",
    "\n",
    "\n",
    "\n",
    "def f(x ,y):\n",
    "    for name in names:\n",
    "        for i in range(vvv[key].nLumiBins):\n",
    "            return y  + vvv[name].fitResults[i].bestFit\n",
    "\n",
    "\n",
    "x = np.array(names)\n",
    "print(x[0])\n",
    "y = range(1,vvv[key].nLumiBins+1)\n",
    "# print(y)\n",
    "X, Y = np.meshgrid(x, y)\n",
    "Z = f(X, Y)\n",
    "plt.contourf(x, y, Z, 20, cmap='RdGy')\n",
    "plt.xticks(rotation=90)\n",
    "plt.xlabel(\"Variable\")\n",
    "plt.ylabel(\"lumi bin\")\n",
    "plt.colorbar()\n",
    "# print(vvv['fixedGridRhoAll'].fitResults[0].bestFit)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7748726f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# import numpy as np\n",
    "# import matplotlib.pyplot as plt\n",
    "# import plotly.express as px\n",
    "\n",
    "\n",
    "# XsecBestTot = {}\n",
    "# keys = []\n",
    "# values = []\n",
    "# nVar = len(variables.keys())\n",
    "# print(nVar)\n",
    "\n",
    "# def f(x ,y):\n",
    "#     return np.sin(y) ** 10 + np.cos(y)\n",
    "\n",
    "\n",
    "# for i in range(vvv[key].nLumiBins):\n",
    "#     for key in vvv:\n",
    "#         keys.append(vvv[key].vname)\n",
    "#         values.append(vvv[key].fitResults[i].bestFit)\n",
    "\n",
    "#     XsecBest= {}\n",
    "#     for q in range(len(keys)):\n",
    "#         XsecBest[keys[q]] = values[q]\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "#     names = list(XsecBest.keys())\n",
    "#     values = list(XsecBest.values())\n",
    "\n",
    "\n",
    "#     #         print('best fit for var = {0} in lumi bin = {1} is : {2} '.format(vvv[key].vname , i+1 , vvv[key].fitResults[i].bestFit))\n",
    "\n",
    "# #     plt.plot(names , values ,'o' , color='tab:brown' , label='lumi bin = {0}'.format(i+1))\n",
    "#     plt.xticks(rotation=90)\n",
    "\n",
    "#     plt.xlabel(\"Variable\")\n",
    "#     plt.ylabel(\"lumi bin\")\n",
    "#     plt.title(\"Best Xsection for different variables for lumi bin = {0} (MCTune = 5)\".format(i+1))\n",
    "#     y = i\n",
    "    \n",
    "#     Z = f(X, Y)\n",
    " \n",
    "# #     plt.legend()\n",
    "# #     plt.savefig('/eos/user/c/cmstandi/www/PU/newres/data2/5/plot for lumi = {}.png'.format(i+1) , dpi=300, bbox_inches='tight')\n",
    "# #     plt.show()\n",
    "#     plt.contourf(names, i, Z, 20, cmap='RdGy')\n",
    "#     plt.xticks(rotation=90)\n",
    "#     plt.colorbar()\n",
    "    \n",
    "# #     fig.write_html('/plot for lumi =1')\n",
    "\n",
    "# #     plt.savefig('XSection Best fit for lumi = {0}.png'.format(i+1))\n",
    "#     keys = []\n",
    "#     values = []\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "942fd9a9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# import numpy as np\n",
    "# import matplotlib.pyplot as plt\n",
    "# import plotly.express as px\n",
    "\n",
    "\n",
    "# XsecBestTot = {}\n",
    "# keys = []\n",
    "# values = []\n",
    "# nVar = len(variables.keys())\n",
    "# print(nVar)\n",
    "\n",
    "\n",
    "# for key in vvv:\n",
    "#     keys.append(vvv[key].vname)\n",
    "#     XsecBest= {}\n",
    "#     for i in range(vvv[key].nLumiBins):\n",
    "#         values.append(vvv[key].fitResults[i].bestFit)\n",
    "\n",
    "        \n",
    "# print(keys)\n",
    "# print(values)\n",
    "\n",
    "\n",
    "# # def f(x ,y):\n",
    "# #     return vvv[x].fitResults[y].bestFit\n",
    "\n",
    "# # x = np.array(keys)\n",
    "# # y = range(vvv[key].nLumiBins+1)\n",
    "\n",
    "# for key in vvv:\n",
    "#     x = key\n",
    "#     for i in range(vvv[key].nLumiBins):\n",
    "#         y = i+1\n",
    "\n",
    "#         X, Y = np.meshgrid(x, y)\n",
    "\n",
    "#         Z = vvv[X].fitResults[Y].bestFit\n",
    "\n",
    "\n",
    "#         plt.contourf(X, Y, Z, 20, cmap='RdGy')\n",
    "#         plt.xticks(rotation=90)\n",
    "#         plt.xlabel(\"Variable\")\n",
    "#         plt.ylabel(\"Lumi bin\")\n",
    "#         plt.title(\"Best Xsection for different variables for every lumi bins\")\n",
    "#         plt.colorbar()\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# #         XsecBest[keys[q]] = values[q]\n",
    "\n",
    "# #         names = list(XsecBest.keys())\n",
    "# #         values = list(XsecBest.values())\n",
    "\n",
    "\n",
    "\n",
    "# #         plt.plot(names , values ,'o-' , color='tab:brown' , label='lumi bin = {0}'.format(i+1))\n",
    "# #         plt.xticks(rotation=90)\n",
    "\n",
    "# #         plt.xlabel(\"Variable\")\n",
    "# #         plt.ylabel(\"Xsection\")\n",
    "# #         plt.title(\"Best Xsection for different variables for lumi bin = {0} (MCTune = 5)\".format(i+1))\n",
    "\n",
    "\n",
    "\n",
    "# #         plt.plot(y_est, '-')\n",
    "# #         plt.fill_between(names, y_est - y_err, y_est + y_err, alpha=0.2 , label = u'69.2 \\u00B1 4.6%' )\n",
    "\n",
    "# #         plt.legend()\n",
    "# #     #     plt.savefig('/eos/user/c/cmstandi/www/PU/newres/data2/4/plot for lumi = {}.png'.format(i+1) , dpi=300, bbox_inches='tight')\n",
    "# #     #     plt.show()\n",
    "\n",
    "# #         XsecBestTot[keys[i]] = values[i]\n",
    "# #         keys = []\n",
    "# #         values = []\n",
    "# #     print(keys)\n",
    "# #     print(values)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "93e9254b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# import numpy as np\n",
    "# import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "# XsecBest = {}\n",
    "# keys = []\n",
    "# values = []\n",
    "# nVar = len(variables.keys())\n",
    "# print(nVar)\n",
    "\n",
    "# for i in range(vvv[key].nLumiBins):\n",
    "#     for key in vvv:\n",
    "#         keys.append(vvv[key].vname)\n",
    "#         values.append(vvv[key].fitResults[i].bestFit)\n",
    "\n",
    "        \n",
    "        \n",
    "        \n",
    "# print(keys)\n",
    "# print(values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "089dfb99",
   "metadata": {},
   "outputs": [],
   "source": [
    "# import numpy as np\n",
    "# import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "# XsecBest = {}\n",
    "# keys = []\n",
    "# values = []\n",
    "# nVar = len(variables.keys())\n",
    "# print(nVar)\n",
    "# for key in vvv:\n",
    "# #     print(vvv[key].vname)\n",
    "#     for i in range(vvv[key].nLumiBins):\n",
    "#         keys.append(vvv[key].vname)\n",
    "#         values.append(vvv[key].fitResults[i].bestFit)\n",
    "# # print(keys)\n",
    "# # print(values)\n",
    "\n",
    "\n",
    "# for i in range(len(keys)):\n",
    "#     XsecBest[keys[i]] = values[i]\n",
    "# # print(XsecBest)\n",
    "\n",
    "# names = list(XsecBest.keys())\n",
    "# values = list(XsecBest.values())\n",
    "\n",
    "\n",
    "# #         print('best fit for var = {0} in lumi bin = {1} is : {2} '.format(vvv[key].vname , i+1 , vvv[key].fitResults[i].bestFit))\n",
    "\n",
    "# plt.plot(names , values ,'o-' , color='tab:brown' , label='lumi bin = {0}'.format(i))\n",
    "# # plt.bar(range(len(XsecBest)), values, tick_label=names)\n",
    "# plt.xticks(rotation=90)\n",
    "\n",
    "# plt.xlabel(\"Variable\")\n",
    "# plt.ylabel(\"Xsection\")\n",
    "# plt.title(\"Best Xsection for different variables\")\n",
    "\n",
    "# y_est = 69.2 #cross section\n",
    "# y_err = 4.6 #cross section error\n",
    "\n",
    "# plt.plot(y_est, '-')\n",
    "# plt.fill_between(names, y_est - y_err, y_est + y_err, alpha=0.2 , label = u'69.2 \\u00B1 4.6' )\n",
    "\n",
    "# plt.legend()\n",
    "# plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0235b922",
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range (vvv['nVertices'].nLumiBins):\n",
    "    print(vvv['nVertices'].data_hists[i].integral())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e47f3a7a",
   "metadata": {},
   "outputs": [],
   "source": [
    "vvv['nVertices'].predictions[0].plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "33f677ad",
   "metadata": {},
   "outputs": [],
   "source": [
    "vvv['nVertices'].predictions[0].plot(param=vvv['nVertices'].fitResults[0].bestFit ,\n",
    "                                    norm=vvv['nVertices'].data_hists[0].integral()\n",
    "                                    )\n",
    "vvv['nVertices'].predictions[0].plot(norm=vvv['nVertices'].data_hists[0].integral() ,param=vvv['nVertices'].fitResults[0].bestFit)\n",
    "prelist = vvv['nVertices'].predictions[0].allProbs()\n",
    "print(prelist)\n",
    "print(sum(prelist))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3dc8b1cd",
   "metadata": {},
   "outputs": [],
   "source": [
    "vvv['nVertices'].data_hists[0].plot()\n",
    "datalist =(vvv['nVertices'].data_hists[0].allProbs())/(vvv['nVertices'].data_hists[0].integral())\n",
    "print(datalist)\n",
    "print(sum(datalist))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1e8d9404",
   "metadata": {},
   "outputs": [],
   "source": [
    "n = 0\n",
    "for i in range(len(datalist)):\n",
    "#     print(datalist[i])\n",
    "#     print(prelist[i])\n",
    "# #     print('-------')\n",
    "    if datalist[i] == 0 :\n",
    "        pass\n",
    "    else: \n",
    "        m = datalist[i] - prelist[i]\n",
    "        k = m**2\n",
    "        j = k/datalist[i]\n",
    "        print(j)\n",
    "        n += j\n",
    "        print(n)\n",
    "        m = 0\n",
    "        print('-----------')\n",
    "print(n)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b3846e7f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import math \n",
    "n = 0\n",
    "for i in range(len(datalist)):\n",
    "#     print(datalist[i])\n",
    "#     print(prelist[i])\n",
    "# #     print('-------')\n",
    "    if datalist[i] == 0 :\n",
    "        pass\n",
    "    else: \n",
    "        m = datalist[i] - prelist[i]\n",
    "        j = m/math.sqrt(datalist[i])\n",
    "        n += j\n",
    "        m = 0\n",
    "print(n)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9feb25a6",
   "metadata": {},
   "outputs": [],
   "source": [
    "#  vvv['nVertices']._subRunsSameLumiBins[0].fitResults"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c8c3b112",
   "metadata": {},
   "outputs": [],
   "source": [
    "# vvv['nVertices'].fitResults[3].plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6d52a700",
   "metadata": {},
   "outputs": [],
   "source": [
    "# vvv['nVertices'].predictions[0] "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7ea4f01f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# vvv['nVertices'].data_hists[0]\n",
    "# print(vvv['fixedGridRhoAll'].nLumiBins)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "91ebe59a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# vvv['nVertices'].fitResults"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4f4ed2ab",
   "metadata": {},
   "outputs": [],
   "source": [
    "# vvv['nVertices'].fitResults"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7fbde913",
   "metadata": {},
   "outputs": [],
   "source": [
    "# simDist = SimulationVSPu('nPhotons' , year = 2018 , var_bins= np.linspace(0,100,101) , pu_max=100 , nthreads=30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fe24cfc6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# aa = simDist.plotEfficiencies()\n",
    "# aa.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f386dc04",
   "metadata": {},
   "outputs": [],
   "source": [
    "# for key in variables.keys():\n",
    "#     print('vName: {0}'.format(key))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7a26a9a1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# MC = SimulationVSPu.mctune\n",
    "# print(MC)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ab179661",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
